- expressions/values/definitions
  1 + 2;;      (* expression *)
  3;;          (* value *)
  let x = 2;;  (* definition *)
  let x = 1 in let y = 2 in x + y;;  (* let expression *)

- some basic types: int, float, bool (true/false), char, string

- some operators
  + - * / versus +. -. *. /.
  < <= > >= = <>
  @ list concatenation
  ^ string concatenation

- functions
  e.g. let rec fact x = if x = 0 then 1 else x * fact (x-1)
  * type of a function: e.g. int -> int, int -> int -> int
  * tail-recursive functions (see below)
  * -> is right associative: e.g.
    int -> int -> int is the same as int -> (int -> int)
  * function application is left associative, e.g.
    f a b is the same as (f a) b
  * "function applications bind tighter than operators"
    e.g. f 1 + 3 is the same as (f 1) + 3
    ** may be a good idea to put negative numbers in brackets e.g.
       f 1 -2 may generate a warning (may be "interpreted" as (f 1) - 2)
  * we think of all functions as taking 1 arguments; a function of 2 arguments
    is just a function that takes the 1st argument & returns a function that
    takes the 2nd argument e.g. as indicated by the type: int -> (int -> int)
  * partial application: process of fixing a number of arguments to a 
    function, producing another function of smaller arity
- tail-recursive vs. non-tail recursive

  let rec fact n = if n <= 0 then 1 else n * fact (n - 1)
  
  fact 5 = 5 * fact 4
         = 5 * (4 * fact 3)
         = 5 * (4 * (3 * fact 2))
         = 5 * (4 * (3 * (2 * fact 1)))
         = 5 * (4 * (3 * (2 * (1 * fact 0))))
         = 5 * (4 * (3 * (2 * (1 * 1))))
         = 5 * (4 * (3 * (2 * 1)))
         = 5 * (4 * (3 * 2))
         = 5 * (4 * 6)
         = 5 * 24
         = 120

  let rec fact' n result = 
    if n <= 0 then result 
    else fact' (n - 1) (n * result)

  fact' 5 1 = fact' 4 5
            = fact' 3 20
            = fact' 2 60
            = fact' 1 120
            = fact' 0 120
            = 120
