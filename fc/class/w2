1. higher-order function
2. operators @@ and |>
3. option type
4. map
5. List.map and List.filter
6. List.fold_right and List.fold_left
7. labled argument/parameter


partial vs. total function

p: no neg, etc
t: can put any function
respect domain for putting value
implicitly domain wil be integer

problem of pf: 

### how to return? implicitely return?

function -> first obj?
c is giving pointer


let add = fun x y -> x + y;;
let add' = fun x -> (fun y -> x + y);;
add = add'

taking function returns another function

operator @@
@@ -> f x = f x;;
no need to () to use higher order fucntion

let square x = x * x;; 
square @@ 1 + 1;;
- results: int = 4

let (|>) x f = f x;;
type operator


2 |> square;; means take argument 2 to function square
i (h (g (f (x)))) = x |> f |> g |> h |> i 

type of option -> like constructor 
there 2 : Some and None


predicate


-1 need (-1) to make it as one argument by wrap it.


map ((+) 2) [2; 3; 4];;

let flip f x y = f y x;;

map(Fun.flip (-) 2) [3; 2; 7; 6; 8];;


Int.compare 1 2;;
 results in -1 is asc, 1 is desc, 0 is ??

stdlib doesn't need to specify call

insertion_sort_v2 (Fun.flip compare) [3; 2; 7; 8]


((((acc $ x1) x2) x3) x4) : idea of folding left
fold_left ( * ) 1 [3; 2; 7]

max;;
fold_left max min_int [3; 2; 7]

[3; 2] |> List.filter (fun x -> x mod 2 = 0) |> List.map (fun x -> x * x) |> fold_left (+) 0;;



recursively call the function labeld as ~cmp
order doesn't matter when calling labled argument


### why would you use label?

