Things to familiarize yourself with:
- useful operators:
	:: cons, right side must be a list
	@ concat, for lists (List.append)
	^ concat, for strings (String.cat)
	|> pipe, the output of the left is passed as the last argument of the right

- basic list functions
	(fold_left, fold_right,
	 hd, tl, rev, filter,
	 append, map/mapi, sort)

- additional useful list functions that probably won't be needed:
	(exists, mem, find/find_opt)

Study topics:
- basics (most of the stuff before midterm)	(on exam)
- lists and tuples ('a list vs ('a * 'b * 'c ...))
- trees, (records and variants)		(on exam)
- type creation, working with custom types (on exam)
- streams (infstream, lazystream)	(on exam)

----------------------------------------------------------------------------------
BASICS (write both regular and tail_recursive solutions where able for extra practice):

1) Write a function [shuffle lst], that shuffles the input list so that for some input
[a; b; c; d; e; f; g], the output should return [a; g; b; f; c; e; d]. In other words, for
a list of length n, the output list contains the last n/2 elements inserted between the
first n/2 elements.
val shuffle : 'a list -> 'a list
Test:	shuffle [1;2;3;4;5;6];; returns [1; 6; 2; 5; 3; 4]
	shuffle ['o';'a';'l';'m';'c'];; returns ['o'; 'c'; 'a'; 'm'; 'l']


2) Write a function [pascal i] which returns the i'th row of Pascal's triangle (1-indexed).
val pascal : int -> int list
Reminder - Pascal's triangle looks like this:
      1
     1 1
    1 2 1
   1 3 3 1
  1 4 6 4 1
1 5 10 10 5 1
Each number is the sum of the numbers above it to the left and right (1 is the sum of 1 and 0)
Test:	pascal 5;; returns [1; 4; 6; 4; 1]
	pascal 6;; returns [1; 5; 10; 10; 5; 1]


3) Write a function [addb lst1 lst2], where lst1 and lst2 are binary numbers represented as
lists containing only 0 or 1. The lists are justified right.
val addb : int list -> int list -> int list
example = lst1 = [1; 0; 0; 0 ;1]
	  lst2 =       [1; 1; 1]
addb lst1 lst2 = [1; 1; 0; 0; 0]


4) Write a function [gcf i1 i2] that returns the greatest common factor between the two
positive integers i1 and i2. (The largest number that divides evenly into both integers.)
val gcf : int -> int -> int
Test:	gcf 18 24;; returns 6
	gcf 363 11;; returns 11
	gcf 5 0;; returns 0
	gcf 7 41;; returns 1

----------------------------------------------------------------------------------
TREES (records + variants) (answer using whatever type you want to practice)
type 'a t_r = Leaf | Node of {v: 'a; l: 'a t_r; r: 'a t_r};;
type 'a t = Leaf | Node of 'a * 'a t * 'a t;;

** Write the insert and empty functions to prepare for the next set of questions. Insert
uses the same logic as we used in class (doesn't allow duplicate values), and empty
returns an empty tree.
val insert : 'a -> 'a t_r -> 'a t_r
val empty : 'a t_r = Leaf

let tree = empty |> insert 5 |> insert 3 |> insert 1 |> insert 4 |> insert 6
^- use this to get the tree i'm using for the tests

5) Write a function [flip tree] that flips the tree across the middle, so that the resulting
tree that is returned is a mirror image of the original tree.
ie.       5		     5
	3   6  returns ->  6   3
       1 4		      4 1
val flip : 'a t_r -> 'a t_r


6a) Implement the mem function [mem value tree] that checks whether that value exists in 
the given tree.
val mem : 'a -> 'a t_r -> bool

6b) With help of the mem function above, implement [swap v1 v2 tree] that returns a tree
with the positions of values v1 and v2 swapped, otherwise returns the original tree.
val swap : 'a -> 'a -> 'a t_r -> 'a t_r


7) Write a function [sum_of_row i tree] that calculates the sum of all numbers of the
i'th row of the tree (1-indexed, the first row is the top root).
val sum_of_row : int -> int t_r -> int
Test:	sum_of_row 3 tree (using the above tree) returns 5
after inserting 8 in to the test tree: sum_of_row 3 tree returns 13

----------------------------------------------------------------------------------
STREAMS
type 'a infstream = Cons of 'a * (unit -> 'a infstream)
let rec from n = Cons (n, fun () -> from (n + 1))
let nats = from 1
let hd (Cons(h, _)) = h
let tl (Cons(_, t)) = t
let rec take n s = if n <= 0 then [] else (hd s) :: (take (n-1) (tl s))
let rec map f s = Cons (f (hd s), fun () -> map f (tl s))
let rec map2 f s1 s2 = Cons(f (hd s1) (hd s2), fun () -> map2 f (tl s1) (tl s2))

8a) Using an infstream, write a recursive function [from_fact n] that behaves similar to the
[from] function, but instead returns a stream where the head is the factorial of the given
number. You may use any of the functions from above to help.
val from_fact : int -> int infstream
Test:	take 9 (from_fact 0) returns [1; 1; 2; 6; 24; 120; 720; 5040; 40320]

8b) Given the formula for estimating the natural logarithm base e (Euler's number) =
sum from n = 0 to inf ( 1 / n! ), create this stream [euler] and use the first 10 values to
estimate e. (actual value = 2.718281828459045). You may need to tweak the factorials from
above to return floats.	
val euler : float infstream
The sum of the first 10 values gave me a result of 2.71828152557319225.


type 'a lazystream = Cons of 'a * ('a lazystream Lazy.t)
let rec from n = Cons (n, lazy (from (n + 1))
let nats = from 1
let hd = (Cons (h, _)) = h
let tl = (Cons (_, t)) = t
let rec take n (Cons (h, t)) = if n <= 0 then [] else h :: take (n-1) (Lazy.force t)
let rec map f (Cons (h, t)) = Cons(f h, lazy (map f (Lazy.force t)))
let rec map2 f s1 s2 =
	Cons (f (hd s1) (hd s2), lazy (map2 f (Lazy.force (tl s1)) (Lazy.force (tl s2))))
let rec unfold f x =
	let (v, x') = f x in Cons (v, lazy (unfold f x'))

9) Estimation of the number pi is done with the infinite series:
3 + (4 / (2*3*4)) - (4 / (4*5*6)) + (4 / (6*7*8)) - (4 / (8*9*10)) + ...
Using the unfold function from above and any other functions from class, create
the a lazystream [est_pi] that can be used to create an estimate of pi, and return the
estimate using the first 20 values.
Test: List.fold_left ( +. ) 3. (take 20 est_pi) gave me a result of 3.14156573465854683